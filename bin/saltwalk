#!/usr/bin/env python
# pylint: disable-msg=C0103
# Copyright (c) 2014-2015 SUSE LLC
#
# Licensed under the MIT license. See MIT-LICENSE for details.

"""
This is a standlone program and not meant to be imported.
"""

import logging
import re
import argparse
import sys
from pprint import PrettyPrinter

import salt.utils.event
import salt.client

from spacewalk.server import rhnSQL
from spacewalk.common.rhnConfig import initCFG

from saltwalk.registration import register_system
from saltwalk.registration import is_minion_registered
from saltwalk.inventory import request_minion_inventory
from saltwalk.actions import handle_job

logger = logging.getLogger("saltwalk")
handler = logging.StreamHandler()
formatter = logging.Formatter(
    '[%(levelname)s] [%(name)s] [%(asctime)s] %(message)s'
)
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.INFO)
pp = PrettyPrinter(indent=2)

# TODO: Where does this fit in?
SALT_JOB_ACTION_TYPE_ID = 503

MASTER_EVENT_PATH = '/var/run/salt/master'

def main():
    """
    Entry point to the Spacewalk reactor. This program will
    wait for events from the salt master indefinitely.
    """
    parser = argparse.ArgumentParser()
    parser.add_argument("--debug", help="Enable debug logging",
                        action="store_true", default=False)
    args = parser.parse_args()

    logger.info("###############################")
    logger.info("# Starting Spacewalk reactor. #")
    logger.info("###############################\n")

    if args.debug:
        logger.setLevel(logging.DEBUG)
        logger.info("Verbose output enabled.")

    logger.debug("init config")
    initCFG()
    logger.debug("init db")
    rhnSQL.initDB()

    pending_jobs = set()

    logger.debug("creating event source and local client.")
    event_source = salt.utils.event.MasterEvent(MASTER_EVENT_PATH)
    client = salt.client.LocalClient()

    logger.info("Entering event loop.")
    for event in event_source.iter_events(full=True):
        try:
            data = event['data']
            tag = event['tag']
        except KeyError as error:
            logger.exception("Unable to process malformed event: %s. %s",
                             event, error)
            continue

        # other possible values:
        # salt/key act accept, act reject
        # salt/auth
        if tag == 'salt/auth':
            minion = data.get('id', None)
            logger.info("minion %s authenticated", minion)
            # TODO: do we need to do something? Update checkin time?

        elif tag == 'minion_start':
            minion = data.get('id', None)

            logger.info('minion %s started', minion)
            # Register if this is the first time we've seen the minion
            if not is_minion_registered(minion):
                register_system(client, minion)
            pending_jobs = request_minion_inventory(pending_jobs, client, minion)
            logger.debug("Pending jobs: %s", pending_jobs)
        elif tag == 'salt/key':
            # if a key is accepted, we should check if the minion
            # is registered.
            # If minion is unaccepted, then deleted from Spacewalk, and
            # then reaccepted, it will not show up as minion_start
            if data['act'] == 'accept' and data.get('result', False):
                minion = data.get('id', None)
                logger.info('minion %s key accepted', minion)
                if not is_minion_registered(minion):
                    register_system(client, minion)
                    pending_jobs = request_minion_inventory(pending_jobs, client, minion)
                    logger.debug("Pending jobs: %s", pending_jobs)
        elif tag.startswith('salt/job'):
            # process a job event
            match = re.match(r'salt/job/\d+/(new|ret)/*.*', tag)
            if not match:
                logger.warning("Unsupported job event: %s", tag)
                logger.debug(pp.pformat(event))
                continue
            job_state = match.groups()[0]
            try:
                pending_jobs = handle_job(pending_jobs, job_state, event)
                logger.debug("Pending jobs: %s", pending_jobs)
            except ValueError as e:
                logger.error(sys.exc_info()[0])
                logger.error("Make sure the action type salt.job is known")
            except Exception as e:
                logger.error(sys.exc_info()[0])
        else:
            logger.warning('Not handling event %s', tag)
            logger.debug(pp.pformat(event))


if __name__ == "__main__":
    main()
